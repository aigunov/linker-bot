package backend.academy.bot.state;

import backend.academy.bot.service.AddLinkRequestService;
import backend.academy.bot.service.Validator;
import com.pengrad.telegrambot.model.Update;
import com.pengrad.telegrambot.model.request.ParseMode;
import com.pengrad.telegrambot.request.SendMessage;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Slf4j
@Component("add-tags-state")
public class AddTagsState extends StateImpl {
    private final AddLinkRequestService trackLinkService;

    private static final String next_button = "–î–∞–ª–µ–µ";
    private static final String message =
            """
        –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–≥–∏ –∫ —Å—Å—ã–ª–∫–µ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):

        üîñ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ä–∞–±–æ—Ç–∞ —É—á–µ–±–∞ –ø—Ä–æ–µ–∫—Ç—ã)
        üîç –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ —Å—Å—ã–ª–∫–∏ –ø–æ —Ç–µ–º–∞–º!

        –ï—Å–ª–∏ —Ç–µ–≥–∏ –Ω–µ –Ω—É–∂–Ω—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ "–î–∞–ª–µ–µ".
        """;

    @Autowired
    public AddTagsState(AddLinkRequestService trackLinkService) {
        super(ChatState.ADD_TAGS, message);
        this.trackLinkService = trackLinkService;
    }

    @Override
    public void handle(Update update) {
        if (update.message().text() != null) {
            switch (update.message().text()) {
                case next_button -> continueWithoutTags(update);
                case back_button -> cancelLinkInsertion(update);
                default -> addTagsToLink(update, update.message().text());
            }
        } else {
            showUnsupportedActionMessage(update);
        }
    }

    private void addTagsToLink(Update update, String message) {
        if (!Validator.isValidTag(message)) {
            var errorMessage = String.format("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–≥–∞—Ö: %s", message);
            log.error("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤: {}", errorMessage);
            validatorChecker(errorMessage, update.message().chat().id());
            cancelLinkInsertion(update);
            backToMenu(update);
            return;
        }
        var chatId = update.message().chat().id();
        log.info("Adding tags {}", message);
        trackLinkService.updateLinkRequestTags(chatId, message);
        stateManager.navigate(update, ChatState.ADD_FILTERS);
    }

    private void cancelLinkInsertion(Update update) {
        var chatId = update.message().chat().id();
        log.info("Cancelling link insertion: {}", chatId);
        bot.execute(new SendMessage(chatId, "–†–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞").parseMode(ParseMode.HTML));
        trackLinkService.clearLinkRequest(chatId);
        stateManager.navigate(update, ChatState.MENU);
    }

    private void continueWithoutTags(Update update) {
        log.info("Link will be tracked without tags");
        stateManager.navigate(update, ChatState.ADD_FILTERS);
    }
}
