package backend.academy.bot.state;

import backend.academy.bot.exception.TelegramApiException;
import com.pengrad.telegrambot.model.Update;
import com.pengrad.telegrambot.model.request.ParseMode;
import com.pengrad.telegrambot.request.SendMessage;
import dto.ApiErrorResponse;
import dto.LinkResponse;
import dto.ListLinkResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

@Slf4j
@Component("list-state")
public class ListState extends StateImpl{

    private final Integer returningDeep = 1;
    private static final String message = "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å—Å—ã–ª–æ–∫: ";

    public ListState() {
        super(ChatState.LIST, message);
    }

    @Override
    public void show(long chatId) {
        log.info("Current state: {}", state);
        try {
            bot.execute(new SendMessage(chatId, message)
                .replyMarkup(keyboardFactory.getBackStateKeyboard())
                .parseMode(ParseMode.HTML));
            var message = handleScrapperResponse(botService.getTrackingLinks(chatId));
            bot.execute(new SendMessage(chatId, message)
                .parseMode(ParseMode.HTML));
        } catch (TelegramApiException e) {
            log.info("Error while sending feedback request message: {}", e.getMessage());
        }
    }

    @Override
    public void handle(Update update) {
        if (update.message().text() != null &&
            update.message().text().equals(back_button)) {
            var chatId = update.message().chat().id();
            stateManager.navigate(update, ChatState.MENU);
        } else {
            showUnsupportedActionMessage(update);
        }
    }

    private String handleScrapperResponse(Object trackingLinks) {
        return switch (trackingLinks) {
            case ListLinkResponse links -> formatLinks((ListLinkResponse) links);
            case ApiErrorResponse error -> formatErrorResponse((ApiErrorResponse) error);
            default -> throw new TelegramApiException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø");
        };
    }

    private String formatLinks(ListLinkResponse linkResponse) {
        if (linkResponse.linkResponses().isEmpty()){
            return "–í—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è";
        }
        StringBuilder sb = new StringBuilder();
        sb.append("üîó <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å—Å—ã–ª–∫–∏:</b>\n\n");
        for (LinkResponse link : linkResponse.linkResponses()) {
            sb.append("üåê <b>URL:</b> ").append(link.url()).append("\n");
            if (!link.tags().isEmpty()) {
                sb.append("üè∑ <b>–¢–µ–≥–∏:</b> ").append(String.join(", ", link.tags())).append("\n");
            } else {
                sb.append("üè∑ <i>–¢–µ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</i>\n");
            }
            if (!link.filters().isEmpty()) {
                sb.append("üîç <b>–§–∏–ª—å—Ç—Ä—ã:</b> ").append(String.join(", ", link.filters())).append("\n");
            } else {
                sb.append("üîç <i>–§–∏–ª—å—Ç—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</i>\n");
            }
            sb.append("\n");
        }
        return sb.toString();
    }

    private String formatErrorResponse(ApiErrorResponse error) {
        StringBuilder sb = new StringBuilder();
        sb.append("‚ùó <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:</b>\n\n");

        sb.append("üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ").append(error.description()).append("\n");

        sb.append("üìã <b>–ö–æ–¥ –æ—à–∏–±–∫–∏:</b> ").append(error.code()).append("\n");

        sb.append("üö® <b>–¢–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è:</b> ").append(error.exceptionName()).append("\n");

        sb.append("üí• <b>–°–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è:</b> ").append(error.exceptionMessage()).append("\n");

        sb.append("\nüîç <b>Stacktrace:</b>\n");

        return sb.toString();
    }
}
